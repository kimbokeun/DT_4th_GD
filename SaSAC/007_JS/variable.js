console.log("JS 연결확인");

// # 1. 
/*
  변수
    - 변할 수 있는 수, 정해진 값이 아닌 수 (variable)
    - 데이터 보관함, 크기는 모두 동일
    - 하나의 값을 저장하기 위해 확보한 메모일 공간 자체
    - 메모리 공간을 식별하기 위해 붙인 이름
  
  변수 선언
    - 변수 정의
  변수 할당
    - '=' 연산자 이용, 값을 부여
  초기화
    - 변수에 처음 값을 할당한 순간

  변수 키워드
    1. var
      - 선언 단계와 초기화 할당 단계가 동시에 진행
      - 초기화에는 undefined 값이 들어감
      - 재선언, 중복 선언 가능
      - 예기치 못한 값을 반환 가능
      - 선언 이전에 참조하면 언제나 undefined를 반환

    2. let
      - let 키워드로는 변수 중복 선언 불가
      - 재할당 가능

    3. const
      - 재선언 불가, 재할당 불가
      - 초반에 선언시 반드시 초기화를 동시에 진행해야 함

*/ 

// # 2. 변수 선언 키워드

// 1. var
var a; // 변수 선언
console.log(a); // 변수 값 출력(undefined 값을 할당하지 않았음) 

a = 2; // 변수 할당
console.log(a);

var a2 = 4; // 변수 선언과 할당을 동시에 > 초기화
console.log(a2);

var a2 = 5; // 재선언
console.log(a2);

a2 = 30; // 재할당
console.log(a2);

// 2. let

let b; // 변수 선언
console.log(b);

b = 7; // 변수 할당
console.log(b);

let b2 = 40; // 변수 선언, 할당 > 초기화
console.log(b2);

// let b2 = 77; // error : 재선언, 중복 선언 불가

b2 = 78; // 재할당 가능
console.log(b2);

// 3. const
/*
변수 선언과 할당이 동시에! 반드시!!
변하지 않는 값을 변수에 저장할 때 사용(상수)
재선언 불가, 재할당 불가
*/

const c = 3;
console.log(c);

/*
재선언 VS 중복 선언
  - "Scope"
    범위
    1. 전역 스코프
    2. 지역 스코프(= 함수 스코프)
    3. 블록 스코프({} 감싸진 내부)

  - 재선언 
    같은 스코프 내 동일한 변수 이름 다시 선언
  
  - 중복선언
    다른 스코프 내 동일한 변수 이름 다시 선언
  
*/


// var 지역 스코프 중복선언
if (true) {
  var s = 10;
}

if (true) {
  var s = 50;
}

console.log(s); // 블록 밖에서도 접근 가능 > 예상치 못한 결과를 초래

// let 지
if (true) {
  let e = 10;
}

if (true) {
  let e = 50;
  console.log(e);
}

// 4. hositing
// JS에서 변수 및 함수 선언이 코드의 최상단으로 이동된 것처럼 동작하는 현상
// > 실제 코드가 이동한 것은 아님
// > 변수와 함수의 선언이 실제 코드의 실행 전에 처리
// > 코드를 이해, 예측하는 데 혼란 야기

console.log(x); // undefined
var x = 10;
console.log(x); // 0

// var x; // 변수 선언 (호이스팅)
// console.log(x); // undefined
// var x = 10;
// console.log(x); // 0

/*
변수 x가 선언되기 전에 사용되었지만, JS 엔진은 선언을 최상단으로 올려서
undefined를 출력한 후, 나중에 변수를 초기화 하여 값을 할당
변수 및 함수는 사용하기 전에 반드시 선언하는 것이 좋습니다.

let, const 키워드는 호이스팅을 줄이고, 블록 스코프를 제공하여 변수의 유효 범위를 명확히 함.
> 최신 JS 코드에서는 let과 const 사용을 적극 권장함

*/ 

/*
5. 변수 이름 규칙(식별자 규칙)
  식별자 : 이름을 붙일 때 사용하는 단어(변수명, 함수명, 클래스명 등)
  - 키워드(예약어) 사용 불가
    * 키워드?
      - 특별한 역할을 이미 하고 있는 단어
        예시) let, var, const, void, return, for, while 등
  - 숫자 시작 x
  - 특수문자 _ / % 만 가능
  - 공백 문자(space bar) 불가

  - 식별자에 단어 두개 이상 작성?
    - camelCase
    - snake_case
    - 

*/

/*
# 상수
  - 프로그램이 실행되는 동안 값이 변하지 않는 데이터
  - 한 번 정의되면 프로그램 실행 중에는 변경되지 않는 값(고정값)
  - 보통 대문자로 표기(개발자 커뮤니케이션 일반적인 룰)
*/ 